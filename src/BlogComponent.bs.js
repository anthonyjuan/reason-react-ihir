// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");

require("./BlogComponent.css");

var myList = /* :: */[
  /* record */[
    /* id */1,
    /* title */"Post Pertama Urang",
    /* highlight */"hari ini seneng banget deh bisa ngepost blog pertama kali...",
    /* datePosted */"kemarin"
  ],
  /* :: */[
    /* record */[
      /* id */2,
      /* title */"Reason ML bukan Mobile Legend",
      /* highlight */"Reason ML adalah programmign language baru yang di develop oleh...",
      /* datePosted */"2 hari yang lalu"
    ],
    /* [] */0
  ]
];

function BlogComponent$BlogItem(Props) {
  var post = Props.post;
  return React.createElement("div", {
              className: "blog-list"
            }, React.createElement("div", {
                  className: "header-title-container"
                }, React.createElement("h3", {
                      className: "header-title"
                    }, post[/* title */1]), React.createElement("p", {
                      className: "date"
                    }, post[/* datePosted */3])), React.createElement("p", undefined, post[/* highlight */2]));
}

var BlogItem = /* module */[/* make */BlogComponent$BlogItem];

function valueFromEvent(evt) {
  return evt.target.value;
}

function BlogComponent$Input(Props) {
  var onSubmit = Props.onSubmit;
  var initialPost = /* record */[
    /* title */"",
    /* highlight */"",
    /* datePosted */""
  ];
  var match = React.useReducer((function (param, newPost) {
          return newPost;
        }), initialPost);
  var setPost = match[1];
  var post = match[0];
  return React.createElement("div", undefined, React.createElement("input", {
                  placeholder: "title",
                  type: "text",
                  value: post[/* title */0],
                  onChange: (function (evt) {
                      return Curry._1(setPost, /* record */[
                                  /* title */evt.target.value,
                                  /* highlight */post[/* highlight */1],
                                  /* datePosted */post[/* datePosted */2]
                                ]);
                    })
                }), React.createElement("input", {
                  placeholder: "highlight",
                  type: "text",
                  value: post[/* highlight */1],
                  onChange: (function (evt) {
                      return Curry._1(setPost, /* record */[
                                  /* title */post[/* title */0],
                                  /* highlight */evt.target.value,
                                  /* datePosted */post[/* datePosted */2]
                                ]);
                    })
                }), React.createElement("input", {
                  placeholder: "datePosted",
                  type: "text",
                  value: post[/* datePosted */2],
                  onChange: (function (evt) {
                      return Curry._1(setPost, /* record */[
                                  /* title */post[/* title */0],
                                  /* highlight */post[/* highlight */1],
                                  /* datePosted */evt.target.value
                                ]);
                    })
                }), React.createElement("button", {
                  onClick: (function (_evt) {
                      Curry._1(onSubmit, post);
                      return Curry._1(setPost, initialPost);
                    })
                }, "Add New Post"));
}

var Input = /* module */[/* make */BlogComponent$Input];

function addNewPost(newPost, lastId) {
  return /* record */[
          /* id */lastId + 1 | 0,
          /* title */newPost[/* title */0],
          /* highlight */newPost[/* highlight */1],
          /* datePosted */newPost[/* datePosted */2]
        ];
}

function BlogComponent(Props) {
  var match = React.useReducer((function (state, action) {
          var lastBlogPost = List.nth(state[/* posts */0], List.length(state[/* posts */0]) - 1 | 0);
          return /* record */[/* posts : :: */[
                    addNewPost(action[0], lastBlogPost[/* id */0]),
                    state[/* posts */0]
                  ]];
        }), /* record */[/* posts */myList]);
  var dispatch = match[1];
  var posts = match[0][/* posts */0];
  var blogPost = List.map((function (blog) {
          return React.createElement(BlogComponent$BlogItem, {
                      post: blog,
                      key: String(blog[/* id */0])
                    });
        }), posts);
  var totalPost = List.length(posts);
  return React.createElement("div", {
              className: "container"
            }, React.createElement("h1", undefined, "Blog Post Urang"), React.createElement(BlogComponent$Input, {
                  onSubmit: (function (post) {
                      return Curry._1(dispatch, /* AddPost */[post]);
                    })
                }), $$Array.of_list(blogPost), React.createElement("div", undefined, String(totalPost) + " Posts"));
}

var make = BlogComponent;

exports.myList = myList;
exports.BlogItem = BlogItem;
exports.valueFromEvent = valueFromEvent;
exports.Input = Input;
exports.addNewPost = addNewPost;
exports.make = make;
/*  Not a pure module */
